#ifndef CAMERA_H
#define CAMERA_H

#include <QMainWindow>
#include <QObject>
#include <QMessageBox>
#include <opencv2/opencv.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/xfeatures2d/nonfree.hpp>
#include <QFileDialog>
#include <QMouseEvent>
#include <QTimer>
#include <QDebug>
#include <QSlider>
#include <QGroupBox>
#include <QVBoxLayout>
#include "opencv2/opencv_modules.hpp"

namespace Ui {
class camera;
}

using namespace cv;
using namespace cv::xfeatures2d;

class camera : public QMainWindow
{
    Q_OBJECT
public:
    explicit camera(QWidget *parent = 0);
    ~camera();

    QPoint cordinatesShift;
    QSize sizeWindow;

private:    
    Ui::camera *ui;

    cv::Mat frame;
    cv::Mat conv_frame;
    cv::Mat object;
    //cv::Mat back_frame;
    cv::Mat sub_back;
    cv::Mat mask_MOG2; //fg mask fg mask generated by MOG2 method
    cv::Ptr<cv::BackgroundSubtractorMOG2> pMOG2; //MOG2 Background subtractor

    cv::VideoCapture capture;

    cv::Rect objectRect;
    //Mat obj_mask;
    cv::Rect showRect;

    double border = 0;

    QTimer *imageTimer;
    QPoint mouseCursor;
    bool first = true;
    bool search = false;
    bool exist = false;
    bool state = true;
    bool first_min = true;

    int par[6];

    int minTrash=40;
    int maxTrash=200;
    int rangeFil=3;

    Vec3f color_cursor;
    QPoint targetsHead;

    QGroupBox *slidersGroup;
    QVBoxLayout *vbox1, *vbox2;
    std::vector<QSlider*> sliders;
    std::vector<QLabel*> labels;
    struct SURF_elem
    {
       std::vector<KeyPoint> keypoint;
       Mat descriptor;
    };
    SURF_elem obj_SURF_elem;

    void initTimer();
    void mouseMoveEvent(QMouseEvent* event);
    void mousePressEvent(QMouseEvent* event);
    Mat addContours(Mat image);
    Mat findObject(Mat image);
    bool inRect(QPoint point, QPoint pointZero, QPoint pointEnd);
    void keyPressEvent(QKeyEvent *event);
    //cv::Mat subsBack(cv::Mat image);
    SURF_elem SURF_find_elem( Mat image );
    Mat SURF_find_obj( Mat image );
    bool have_keypoint( Mat frag_image );

signals:
    void signal_ImageChanged(QPixmap &Value);
    void signal_create_window(QSize size);
    void signal_get_object(Mat image);
    void signal_sent_shift();
    void signal_sent_ready(QPoint cordinate);
    void signal_sent_state(bool state);

public slots:
    void slot_create_window();
    void slot_show_camera();
private slots:
    void on_butSaveScr_clicked();
    void on_butStart_clicked();
    void on_butStop_clicked();
    void slot_get_object(Mat image);
    void slot_sent_shift();
    void setValueSlid(int val);
};

#endif // CAMERA_H
